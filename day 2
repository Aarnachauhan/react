/*
Challenge: Starting from scratch, build and render the 
HTML for our section project. Check the Google slide for 
what you're trying to build.

We'll be adding more styling to it later.

Hints:
* The React logo is a file in the project tree, so you can
  access it by using `src="react-logo.png"` in your image
  element
* You can also set the `width` attribute of the image element
  just like in HTML. In the slide, I have it set to 40px
 */
import { createRoot } from "react-dom/client"
import { createElement } from "react"

const root= createRoot(document.getElementById("root"))
root.render(
    <main>
    <img src="react-logo.png" width="40px" alt="React logo" />
    <h1> Fun facts about React </h1>
    <ul>
    <li>Was first released in 2013 </li>
    <li> Was originally created by Jordan Walke </li>
    <li> Has well 100K stars on Github</li>
    <li>Is maintained by Meta </li>
    <li> Powers thousands of enterprise apps, including mobile apps</li>
    
    </ul>
    
    </main>
)
---------------------------------------------------------------------------------
  1. Where does React put all of the elements I create in JSX when I 
   call `root.render()`?

All the elements I render get put inside the div with the id of "root"
(or whatever other element I might select when calling createRoot)


2. What would show up in my console if I were to run this line of code:
```
console.log(<h1>Hello world!</h1>)
```
An object!
3. What's wrong with this code:
```
root.render(
    <section>
        <h1>Hi there</h1>
        <p>This is my website!</p>
    </section>
)
```
You can only render 1 parent element at a time. That parent element can have
as many children elements as you want.


4. What does it mean for something to be "declarative" instead of "imperative"?
*Imperative* means we need to give specific step-by-step instructions on how to
accomplish a task.
*Declarative* means we can write our code to simply "describe" *what* should show up
on the page and allow the rool (React, e.g.) to handle the details on *how* to 
put those things on the page.
5. What does it mean for something to be "composable"?
We have small pieces that we can put together to make something
larger or greater than the individual pieces themselves.
---------------------------------------------------------------------------------------
  custom elements 
  import { createRoot } from "react-dom/client"
const root = createRoot(document.getElementById("root"))

root.render(
    <TemporaryName />
)

function TemporaryName() {
    return (
        <main>
            <img src="react-logo.png" width="40px" alt="React logo" />
            <h1>Fun facts about React!</h1>
            <ul>
                <li>Was first release in 2013</li>
                <li>Was originally created by Jordan Walke</li>
                <li>Has well over 200K stars on GitHub</li>
                <li>Is maintained by Meta</li>
                <li>Powers thousands of enterprise apps, including mobile apps</li>
            </ul>
        </main>
    )
}
----------------------------------------------------------------------------------------
import { createRoot } from "react-dom/client"
const root = createRoot(document.getElementById("root"))

/**
 * Challenge (part 1):
 * Create a custom "Page" component
 * 
 * It should return an ordered list with the reasons why you're
 * excited to be learning React :)
 * 
 * Render the Page component.
 */

root.render(
    <Page/>
)

function Page(){
     return (
        <main>
        <ol>
        <li> i want to gett a job</li>
        <li> i want to be skilled </li>
        <li> i want to be confident iin coding </li>
        <li>yes that's it </li>
        
         </ol>
        </main>
     )
}
-------------------------------------------------------------------------
Add a `<header>` element with an `<img />` element with the image of the 
  React logo inside (src="react-logo.png") and make sure to set the 
  width to something more manageable so it doesn't take up the whole screen.
  Also, as always, you should include some alt text on the image.
- Add an `<h1>` with some text describing the page. (E.g. "Reasons
  I'm excited to learn React"). Place it above the ordered list, then wrap
  the `<h1>` and `<ol>` inside a `<main>` element to keep our semantic
  structure flowing well.
- Add a `<footer>` after the list that says: 
    "Â© 20xx <last name here> development. All rights reserved."
 */
import { createRoot } from "react-dom/client"
const root = createRoot(document.getElementById("root"))

function Page() {
    return (
        <div>
            <header>
                <img src="react-logo.png" width="40px" alt="React logo" />
            </header>
            <main>
                <h1>Reason I am excited to learn React</h1>
                <ol>
                    <li>React is a popular library, so I will be able to fit in with all the coolest devs out there! ðŸ˜Ž</li>
                    <li>I am more likely to get a job as a front end developer if I know React</li>
                </ol>
            </main>
            <footer>
                <small>Â© 2024 Ziroll development. All rights reserved.</small>
            </footer>
        </div>
    )
}

root.render(
    <Page />
)
-------------------------------------------------------------------------------------
1. What is a React component?
A function that returns React elements. (UI)

2. What's wrong with this code?
```
function myComponent() {
    return (
        <small>I'm tiny text!</small>
    )
}
```
here name of the function should be in pascal case format . MyComponent.
3. What's wrong with this code?
```
function Header() {
    return (
        <header>
            <img src="./react-logo.png" width="40px" alt="React logo" />
        </header>
    )
}

root.render(Header())
```
root.render(<Header />)
  
